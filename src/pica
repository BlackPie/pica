#!/bin/bash

CONF_FILE='/etc/pica/pica.conf'


write_log() {
  [ -n "${PICA_LOG_FILE}" ] && echo "$(date): ${*}" >> "${PICA_LOG_FILE}"
}

exit_error() {
  echo "${*}" >&2
  write_log "${*}"
  exit 1
}

# запись кэш файла
# 1 - PATHFILE
# 2 - TOTAL_OK
# 3 - TOTAL
# 4 - REPORT_STATUS
# 5 - TEST_COMMENTS
save_report() {
  echo "${4} (${2}/${3})" > "${1}~" || exit_error "Write report file ${1}~ failed"
  echo -e "${5}" >> "${1}~" || exit_error "Write report file ${1}~ failed"
  mv "${1}~" "${1}" || exit_error "Write report file ${1} failed"
}

# запись кэш файла
# 1 - PATHFILE
# 2 - PA_VERSION
# 3 - RESULT
# 4 - PA_COMMENT_OK
# 5 - PA_COMMENT_FAIL
save_cache() {
  echo "CACHE_VERSION=\"${2}\"" > "${1}~" || exit_error "Write cache file ${1}~ failed"
  echo "CACHE_STATUS=\"${3}\"" >> "${1}~" || exit_error "Write cache file ${1}~ failed"
  [ "${RESULT}" = 'OK' ] && COMMENT="${PA_COMMENT_OK}" || COMMENT="${PA_COMMENT_FAIL}"
  echo "CACHE_COMMENT=\"${COMMENT}\"" >> "${1}~" || exit_error "Write cache file ${1}~ failed"
  mv "${1}~" "${1}" || exit_error "Write cache file ${1} failed"
}

load_file() {
  FILENAME="${1}"
  shift
  while read LINE; do
    [ -z "${LINE}" -o "${LINE#\#}" != "${LINE}" ] && continue
    if [ "$(echo ${@} ${LINE%%=*} | tr ' ' '\n' | sort | uniq -d)" = "${LINE%%=*}" ]; then
      eval "${LINE%%=*}=${LINE#*=}"
    else 
      echo "Error line: ${LINE}"  >&2
      return 1
    fi
  done < "${FILENAME}"
}

# проверка наличия conf файла
[ -f "${CONF_FILE}" ] || exit_error "Conf file ${CONF_FILE} does not exist"

# проверка права чтения conf файла
[ -r "${CONF_FILE}" ] || exit_error "Can not read conf file ${CONF_FILE}"

# загружаем из конфигурационного файла указанные опции
load_file "${CONF_FILE}" PICA_TAGS PICA_TEST_DIR PICA_TEST_CACHE_DIR PICA_REPORT_DIR PICA_EXCEPTIONS PICA_LOG_FILE \
  || exit_error "Error loading config file ${CONF_FILE}"

[ -z "${PICA_TAGS}" ] && exit_error "PICA_TAGS is not set in ${CONF_FILE}"
[ -z "${PICA_TEST_DIR}" ] && exit_error "PICA_TEST_DIR is not set in ${CONF_FILE}"
[ -z "${PICA_TEST_CACHE_DIR}" ] && exit_error "PICA_TEST_CACHE_DIR is not set in ${CONF_FILE}"
[ -z "${PICA_REPORT_DIR}" ] && exit_error "PICA_REPORT_DIR is not set in ${CONF_FILE}"
[ -z "${PICA_EXCEPTIONS}" ] && exit_error "PICA_EXCEPTIONS is not set in ${CONF_FILE}"
[ -z "${PICA_LOG_FILE}" ] && exit_error "PICA_LOG_FILE is not set in ${CONF_FILE}"

# проверка прав записи в лог файл
  [ -w "${PICA_LOG_FILE}" ] || exit_error "${PICA_LOG_FILE} is not writable "

# проверка прав записи отчета
  [ -w "${PICA_REPORT_DIR}/report" ] || exit_error "${PICA_REPORT_DIR}/report is not writable "

# проверка наличия папки с тестами и возможности чтения
[ -d "${PICA_TEST_DIR}" -a -r "${PICA_TEST_DIR}" -a -x "${PICA_TEST_DIR}" ] \
  || exit_error "Test's directory ${PICA_TEST_DIR} not found or unreadable"

# проверка непустоты папка с тестами
[ -z "$(ls ${PICA_TEST_DIR})" ] && exit_error "Test's folder is empty"

# проверка наличия папки с кэшем и возможности записи
[ -d "${PICA_TEST_CACHE_DIR}" -a -w "${PICA_TEST_CACHE_DIR}" -a -r "${PICA_TEST_CACHE_DIR}" -a -x "${PICA_TEST_CACHE_DIR}" ] \
  || exit_error "Cache directory ${PICA_TEST_CACHE_DIR} not found or has wrong permissions"

REPORT_WARNING=0
REPORT_CRITICAL=0
TOTAL=0
TOTAL_OK=0

# переборка всех тест файлов
for TEST_FILE in "${PICA_TEST_DIR}"/*.pa; do

  # проверка тест файла на читаемость
  if ! [ -r "${TEST_FILE}" ]; then
    echo "Test file ${TEST_FILE} is unreadable" >&2
    continue
  fi

  # очистка среды для нового теста
  unset PA_VERSION
  unset PA_TAG
  unset PA_COMMAND
  unset PA_COMMENT_OK
  unset PA_COMMENT_FAIL
  unset PA_EXPIRE
  unset PA_SEVERITY

  unset CACHE_VERSION
  unset CACHE_STATUS
  unset CACHE_COMMENT


  load_file "${TEST_FILE}" PA_VERSION PA_TAG PA_COMMAND PA_COMMENT_OK PA_COMMENT_FAIL PA_EXPIRE PA_SEVERITY \
    || exit_error "Error loading config file ${CONF_FILE}"

  [ -z "${PA_VERSION}" ] && echo "PA_VERSION is not exist in ${TEST_FILE}" >&2 && continue
  [ -z "${PA_TAG}" ] && echo "PA_TAG is not exist in ${TEST_FILE}" >&2 && continue
  [ -z "${PA_COMMAND}" ] && echo "PA_COMMAND is not exist in ${TEST_FILE}" >&2 && continue
  [ -z "${PA_COMMENT_OK}" ] && echo "PA_COMMENT_OK is not exist in ${TEST_FILE}" >&2 && continue
  [ -z "${PA_COMMENT_FAIL}" ] && echo "PA_COMMENT_FAIL is not exist in ${TEST_FILE}" >&2 && continue
  [ -z "${PA_EXPIRE}" ] && echo "PA_EXPIRE is not exist in ${TEST_FILE}" >&2 && continue
  [ -z "${PA_SEVERITY}" ] && echo "PA_SEVERITY is not exist in ${TEST_FILE}" >&2 && continue

  # отсечение тестов с неудовлетворяющим тегом
  [ -z "$(echo ${PICA_TAGS[@]} ${PA_TAG[@]} | tr ' ' '\n' | sort | uniq -d)" ] && continue

  # исключение тестов по имени в глобальном конфиге
  [ -n "$(echo ${PICA_EXCEPTIONS[@]} ${TEST_FILE##*/} | tr ' ' '\n' | sort | uniq -d)" ] && continue

  echo -n "${TEST_FILE##*/}... " >&2

  # проверка кеш файла
  if [ -e "${PICA_TEST_CACHE_DIR}/${TEST_FILE##*/}.cache" ]; then
  # загрузка кеш файла
    load_file "${PICA_TEST_CACHE_DIR}/${TEST_FILE##*/}.cache" CACHE_VERSION CACHE_STATUS CACHE_COMMENT \
      || exit_error "Error loading config file ${CONF_FILE}"

    # проверка кэша по EXPIRE
    LIFETIME_OF_CACHE=$[$(date +'%s')-$(stat -c '%Z' "${PICA_TEST_CACHE_DIR}/${TEST_FILE##*/}.cache")]
    if [ "${LIFETIME_OF_CACHE}" -lt "${PA_EXPIRE}" -a "${PA_VERSION}" = "${CACHE_VERSION}" ]; then
      echo 'cached' >&2
      continue
    fi
  fi

  if ${PA_COMMAND} >/dev/null 2>/dev/null; then
    RESULT='OK'
  else
    RESULT="${PA_SEVERITY}"
  fi

  echo "${RESULT}" >&2

  # создание статуса для отчета
  if [ "${RESULT}" = 'CRITICAL' ]; then
    let "REPORT_CRITICAL = REPORT_CRITICAL + 1"
  elif [ "${RESULT}" = 'WARNING' ]; then
    let "REPORT_WARNING = REPORT_WARNING + 1"
  else
    let "TOTAL_OK=TOTAL_OK+1"
  fi

  save_cache "${PICA_TEST_CACHE_DIR}/${TEST_FILE##*/}.cache" "${PA_VERSION}" "${RESULT}" "${PA_COMMENT_OK}" "${PA_COMMENT_FAIL}"
  
  [ "${RESULT}" = 'OK' ] && COMMENT="${PA_COMMENT_OK}" || COMMENT="${PA_COMMENT_FAIL}"
  TEST_COMMENTS="${TEST_COMMENTS}${TEST_FILE##*/}: ${COMMENT}"
  let "TOTAL=TOTAL+1"
done

if [ ${REPORT_WARNING} = 0 -a ${REPORT_CRITICAL} = 0 ]; then
  REPORT_STATUS='OK'
elif [ ${REPORT_WARNING} != 0 -a ${REPORT_CRITICAL} = 0 ]; then
  REPORT_STATUS='WARNING'
elif [ ${REPORT_CRITICAL} != 0 ]; then
  REPORT_STATUS='CRITICAL'
fi

# Запись статуса в отчет
save_report "${PICA_REPORT_DIR}/report" "${TOTAL_OK}" "${TOTAL}" "${REPORT_STATUS}" "${TEST_COMMENTS}"
